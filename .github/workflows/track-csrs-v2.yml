name: Track and Validate CSR Files

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-csrs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install OpenSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl jq

      - name: Create CSR tracking database if not exists
        run: |
          if [ ! -f .github/csr_db.json ]; then
            echo '{"csrs": []}' > .github/csr_db.json
          fi

      - name: Process CSR files
        id: process-csrs
        run: |
          # Create temporary files for storing results
          echo "[]" > new_csrs.json
          echo "[]" > duplicate_csrs.json
          
          # Process all CSR files in the repository
          find . -name "*.csr" -type f | while read -r csr_file; do
            # Extract CSR information
            subject=$(openssl req -in "$csr_file" -noout -subject 2>/dev/null)
            pubkey=$(openssl req -in "$csr_file" -noout -pubkey 2>/dev/null | openssl md5 | cut -d' ' -f2)
            
            if [ -n "$subject" ]; then
              # Create JSON object for current CSR
              csr_info=$(jq -n \
                --arg file "$csr_file" \
                --arg subject "$subject" \
                --arg pubkey "$pubkey" \
                --arg date "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                '{file: $file, subject: $subject, pubkey: $pubkey, date: $date}')
              
              # Check for duplicates in existing database
              is_duplicate=$(jq --argjson csr "$csr_info" '.csrs[] | select(.pubkey == $csr.pubkey or .subject == $csr.subject)' .github/csr_db.json)
              
              if [ -n "$is_duplicate" ]; then
                echo "$csr_info" | jq -c '.' >> duplicate_csrs.json
              else
                echo "$csr_info" | jq -c '.' >> new_csrs.json
              fi
            fi
          done

          # Set output for duplicates found
          if [ -s duplicate_csrs.json ]; then
            echo "::set-output name=duplicates_found::true"
          else
            echo "::set-output name=duplicates_found::false"
          fi

      - name: Update CSR database
        run: |
          # Merge new CSRs into database
          jq -s '.[0].csrs += .[1] | .[0]' .github/csr_db.json new_csrs.json > temp_database.json
          mv temp_database.json .github/csr_db.json

      - name: Generate report
        run: |
          echo "### CSR Tracking Report" > report.md
          echo "Generated at: $(date -u)" >> report.md
          echo "" >> report.md
          
          echo "#### New CSRs" >> report.md
          if [ -s new_csrs.json ]; then
            jq -r '.[] | "- File: \(.file)\n  Subject: \(.subject)\n  Date: \(.date)\n"' new_csrs.json >> report.md
          else
            echo "No new CSRs found." >> report.md
          fi
          
          echo "" >> report.md
          echo "#### Duplicate CSRs Detected" >> report.md
          if [ -s duplicate_csrs.json ]; then
            jq -r '.[] | "- File: \(.file)\n  Subject: \(.subject)\n  Date: \(.date)\n"' duplicate_csrs.json >> report.md
            echo "::warning::Duplicate CSRs detected! Check the report for details."
          else
            echo "No duplicates found." >> report.md
          fi

      - name: Create or update report issue
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['csr-tracking'],
              state: 'open'
            });
            
            const issueBody = `${report}\n\nLast updated: ${new Date().toISOString()}`;
            
            if (issues.data.length > 0) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: issueBody
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'CSR Tracking Report',
                body: issueBody,
                labels: ['csr-tracking']
              });
            }

      - name: Commit updated database
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/csr_db.json
          git commit -m "Update CSR database" || echo "No changes to commit"
          git push
